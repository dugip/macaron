{"version":3,"sources":["../src/index.ts","../src/babel.ts","../src/compile.ts"],"sourcesContent":["export { babelTransform, BabelOptions } from './babel';\nexport { compile } from './compile';\n","import { TransformOptions, transformFileAsync } from '@babel/core';\nimport {\n  macaronBabelPlugin,\n  PluginOptions,\n  macaronStyledComponentsPlugin,\n} from '@macaron-css/babel';\n\nexport type BabelOptions = Omit<TransformOptions, 'ast' | 'filename' | 'root' | 'sourceFileName' | 'sourceMaps' | 'inputSourceMap'>;\n\nexport async function babelTransform(path: string, babel: BabelOptions = {}) {\n  const options: PluginOptions = { result: ['', ''], path };\n  const result = await transformFileAsync(path, {\n    ...babel,\n    plugins: [\n      ...(Array.isArray(babel.plugins) ? babel.plugins : []), \n      macaronStyledComponentsPlugin(), \n      [macaronBabelPlugin(), options]\n    ],\n    presets: [\n      ...(Array.isArray(babel.presets) ? babel.presets : []), \n      '@babel/preset-typescript'\n    ],\n    sourceMaps: false,\n  });\n\n  if (result === null || result.code === null)\n    throw new Error(`Could not transform ${path}`);\n\n  return { result: options.result, code: result.code };\n}\n","import { transformSync } from '@babel/core';\nimport { macaronStyledComponentsPlugin } from '@macaron-css/babel';\nimport { addFileScope, getPackageInfo } from '@vanilla-extract/integration';\nimport defaultEsbuild, { PluginBuild } from 'esbuild';\nimport fs from 'fs';\nimport { basename, dirname, join } from 'path';\n\ninterface CompileOptions {\n  esbuild?: PluginBuild['esbuild'];\n  filePath: string;\n  contents: string;\n  cwd?: string;\n  externals?: Array<string>;\n  resolverCache: Map<string, string>;\n  originalPath: string;\n}\n\nexport async function compile({\n  esbuild = defaultEsbuild,\n  filePath,\n  cwd = process.cwd(),\n  externals = [],\n  contents,\n  resolverCache,\n  originalPath,\n}: CompileOptions) {\n  const packageInfo = getPackageInfo(cwd);\n  let source: string;\n\n  if (resolverCache.has(originalPath)) {\n    source = resolverCache.get(originalPath)!;\n  } else {\n    source = addFileScope({\n      source: contents,\n      filePath: originalPath,\n      rootPath: cwd,\n      packageName: packageInfo.name,\n    });\n\n    resolverCache.set(originalPath, source);\n  }\n\n  const result = await esbuild.build({\n    stdin: {\n      contents: source,\n      loader: 'tsx',\n      resolveDir: dirname(filePath),\n      sourcefile: basename(filePath),\n    },\n    metafile: true,\n    bundle: true,\n    external: [\n      '@vanilla-extract',\n      // 'solid-js',\n      '@macaron-css',\n      // '@comptime-css',\n      ...externals,\n    ],\n    platform: 'node',\n    write: false,\n    absWorkingDir: cwd,\n    plugins: [\n      {\n        name: 'macaron:stub-solid-template-export',\n        setup(build) {\n          build.onResolve({ filter: /^solid-js\\/web$/ }, args => {\n            return {\n              namespace: 'solid-web',\n              path: args.path,\n            };\n          });\n\n          // TODO: change this to use the server transform from solid\n          build.onLoad({ filter: /.*/, namespace: 'solid-web' }, async args => {\n            return {\n              contents: `\n              const noop = () => {\n                return new Proxy({}, {\n                  get() {\n                    throw new Error(\"macaron: This file tried to call template() directly and use its result. Please check your compiled solid-js output and if it is correct, please file an issue at https://github.com/mokshit06/macaron/issues\");\n                  }\n                });\n              }\n\n              export const template = noop;\n              export const delegateEvents = noop;\n\n              export * from ${JSON.stringify(require.resolve('solid-js/web'))};\n              `,\n              resolveDir: dirname(args.path),\n            };\n          });\n        },\n      },\n      {\n        name: 'macaron:custom-extract-scope',\n        setup(build) {\n          build.onLoad({ filter: /\\.(t|j)sx?$/ }, async args => {\n            const contents = await fs.promises.readFile(args.path, 'utf8');\n            let source = addFileScope({\n              source: contents,\n              filePath: args.path,\n              rootPath: build.initialOptions.absWorkingDir!,\n              packageName: packageInfo.name,\n            });\n\n            source = transformSync(source, {\n              filename: args.path,\n              plugins: [macaronStyledComponentsPlugin()],\n              presets: ['@babel/preset-typescript'],\n              sourceMaps: false,\n            })!.code!;\n\n            return {\n              contents: source,\n              loader: 'tsx',\n              resolveDir: dirname(args.path),\n            };\n          });\n        },\n      },\n    ],\n  });\n\n  const { outputFiles, metafile } = result;\n\n  if (!outputFiles || outputFiles.length !== 1) {\n    throw new Error('Invalid child compilation');\n  }\n\n  return {\n    source: outputFiles[0].text,\n    watchFiles: Object.keys(metafile?.inputs || {}).map(filePath =>\n      join(cwd, filePath)\n    ),\n  };\n}\n"],"mappings":"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","names":["import_core","import_babel","defaultEsbuild","contents","fs","source","filePath"]}