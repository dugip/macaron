{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { babelTransform, compile, BabelOptions } from '@macaron-css/integration';\nimport { processVanillaFile } from '@vanilla-extract/integration';\nimport fs from 'fs';\nimport { join, resolve } from 'path';\nimport { normalizePath, PluginOption, ResolvedConfig, ViteDevServer } from 'vite';\n\nconst extractedCssFileFilter = /extracted_(.*)\\.css\\.ts(\\?used)?$/;\n\nexport function macaronVitePlugin(options?: { babel?: BabelOptions }): PluginOption {\n  let config: ResolvedConfig;\n  let server: ViteDevServer;\n  const cssMap = new Map<string, string>();\n  const resolverCache = new Map<string, string>();\n  const resolvers = new Map<string, string>();\n  const idToPluginData = new Map<string, Record<string, string>>();\n\n  const virtualExt = '.vanilla.css';\n\n  return {\n    name: 'macaron-css-vite',\n    enforce: 'pre',\n    buildStart() {\n      resolvers.clear();\n      idToPluginData.clear();\n      resolverCache.clear();\n      cssMap.clear();\n    },\n    configureServer(_server) {\n      server = _server;\n    },\n    async configResolved(resolvedConfig) {\n      config = resolvedConfig;\n    },\n    resolveId(id, importer, options) {\n      if (id.startsWith('\\0')) return;\n\n      if (extractedCssFileFilter.test(id)) {\n        const normalizedId = id.startsWith('/') ? id.slice(1) : id;\n        let resolvedPath = normalizePath(join(importer!, '..', normalizedId));\n\n        if (!resolvers.has(resolvedPath)) {\n          return;\n        }\n\n        return resolvedPath;\n      }\n\n      if (id.endsWith(virtualExt)) {\n        const normalizedId = id.startsWith('/') ? id.slice(1) : id;\n\n        const key = normalizePath(resolve(config.root, normalizedId));\n        if (cssMap.has(key)) {\n          return key;\n        }\n      }\n    },\n    async load(id, options) {\n      if (id.startsWith('\\0')) return;\n\n      if (extractedCssFileFilter.test(id)) {\n        let normalizedId = customNormalize(id);\n        let pluginData = idToPluginData.get(normalizedId);\n\n        if (!pluginData) {\n          return null;\n        }\n\n        const resolverContents = resolvers.get(pluginData.path);\n\n        if (!resolverContents) {\n          return null;\n        }\n\n        idToPluginData.set(id, {\n          ...idToPluginData.get(id),\n          filePath: id,\n          originalPath: pluginData.mainFilePath,\n        });\n\n        return resolverContents;\n      }\n\n      if (id.endsWith(virtualExt)) {\n        const cssFileId = normalizePath(resolve(config.root, id));\n        const css = cssMap.get(cssFileId);\n\n        if (typeof css !== 'string') {\n          return;\n        }\n\n        return css;\n      }\n    },\n    async transform(code, id, ssrParam) {\n      if (id.startsWith('\\0')) return;\n\n      const moduleInfo = idToPluginData.get(id);\n\n      let ssr: boolean | undefined;\n\n      if (typeof ssrParam === 'boolean') {\n        ssr = ssrParam;\n      } else {\n        ssr = ssrParam?.ssr;\n      }\n\n      // is returned from extracted_HASH.css.ts\n      if (\n        moduleInfo &&\n        moduleInfo.originalPath &&\n        moduleInfo.filePath &&\n        extractedCssFileFilter.test(id)\n      ) {\n        const { source, watchFiles } = await compile({\n          filePath: moduleInfo.filePath,\n          cwd: config.root,\n          originalPath: moduleInfo.originalPath,\n          contents: code,\n          resolverCache,\n          externals: [],\n        });\n\n        for (const file of watchFiles) {\n          if (extractedCssFileFilter.test(file)) {\n            continue;\n          }\n          // In start mode, we need to prevent the file from rewatching itself.\n          // If it's a `build --watch`, it needs to watch everything.\n          if (config.command === 'build' || file !== id) {\n            this.addWatchFile(file);\n          }\n        }\n\n        try {\n          const contents = await processVanillaFile({\n            source,\n            filePath: moduleInfo.filePath,\n            identOption:\n              undefined ?? (config.mode === 'production' ? 'short' : 'debug'),\n            serializeVirtualCssPath: async ({ fileScope, source }) => {\n              const id: string = `${fileScope.filePath}${virtualExt}`;\n              const cssFileId = normalizePath(resolve(config.root, id));\n\n              if (server) {\n                const { moduleGraph } = server;\n                const moduleId = normalizePath(join(config.root, id));\n                const module = moduleGraph.getModuleById(moduleId);\n\n                if (module) {\n                  moduleGraph.invalidateModule(module);\n                  module.lastHMRTimestamp =\n                    module.lastInvalidationTimestamp || Date.now();\n                }\n              }\n\n              cssMap.set(cssFileId, source);\n\n              return `import \"${id}\";`;\n            },\n          });\n\n          return contents;\n        } catch (error) {\n          throw error;\n        }\n      }\n\n      if (/(j|t)sx?(\\?used)?$/.test(id) && !id.endsWith('.vanilla.js')) {\n        if (id.includes('node_modules')) return;\n\n        // gets handled by @vanilla-extract/vite-plugin\n        if (id.endsWith('.css.ts')) return;\n\n        try {\n          await fs.promises.access(id, fs.constants.F_OK);\n        } catch {\n          // probably a virtual file, to be handled by other plugin\n          return;\n        }\n\n        const {\n          code,\n          result: [file, cssExtract],\n        } = await babelTransform(id, options?.babel);\n\n        if (!cssExtract || !file) return null;\n\n        if (config.command === 'build' && config.build.watch) {\n          this.addWatchFile(id);\n        }\n\n        let resolvedCssPath = normalizePath(join(id, '..', file));\n\n        if (server && resolvers.has(resolvedCssPath)) {\n          const { moduleGraph } = server;\n\n          const module = moduleGraph.getModuleById(resolvedCssPath);\n          if (module) {\n            moduleGraph.invalidateModule(module);\n          }\n        }\n\n        const normalizedCssPath = customNormalize(resolvedCssPath);\n\n        resolvers.set(resolvedCssPath, cssExtract);\n        resolverCache.delete(id);\n        idToPluginData.delete(id);\n        idToPluginData.delete(normalizedCssPath);\n\n        idToPluginData.set(id, {\n          ...idToPluginData.get(id),\n          mainFilePath: id,\n        });\n        idToPluginData.set(normalizedCssPath, {\n          ...idToPluginData.get(normalizedCssPath),\n          mainFilePath: id,\n          path: resolvedCssPath,\n        });\n\n        return {\n          code,\n        };\n      }\n\n      return null;\n    },\n  };\n}\n\nfunction customNormalize(path: string) {\n  return path.startsWith('/') ? path.slice(1) : path;\n}\n"],"mappings":"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","names":["import_integration","options","source","id","module","fs","code"]}